require("plenary.async").tests.add_to_env()
local fm = require("fm")
local test_util = require("tests.test_util")

a.describe("window options", function()
  after_each(function()
    test_util.reset_editor()
  end)

  a.it("Restores window options on close", function()
    vim.cmd.edit({ args = { "README.md" } })
    fm.open()
    test_util.wait_for_autocmd({ "User", pattern = "FmEnter" })
    assert.equals("no", vim.o.signcolumn)
    fm.close()
    assert.equals("auto", vim.o.signcolumn)
  end)

  a.it("Restores window options on edit", function()
    fm.open()
    test_util.wait_for_autocmd({ "User", pattern = "FmEnter" })
    assert.equals("no", vim.o.signcolumn)
    vim.cmd.edit({ args = { "README.md" } })
    assert.equals("auto", vim.o.signcolumn)
  end)

  a.it("Restores window options on split <filename>", function()
    fm.open()
    test_util.wait_for_autocmd({ "User", pattern = "FmEnter" })
    assert.equals("no", vim.o.signcolumn)
    vim.cmd.split({ args = { "README.md" } })
    assert.equals("auto", vim.o.signcolumn)
  end)

  a.it("Restores window options on split", function()
    fm.open()
    test_util.wait_for_autocmd({ "User", pattern = "FmEnter" })
    assert.equals("no", vim.o.signcolumn)
    vim.cmd.split()
    vim.cmd.edit({ args = { "README.md" } })
    assert.equals("auto", vim.o.signcolumn)
  end)

  a.it("Restores window options on tabnew <filename>", function()
    fm.open()
    test_util.wait_for_autocmd({ "User", pattern = "FmEnter" })
    assert.equals("no", vim.o.signcolumn)
    vim.cmd.tabnew({ args = { "README.md" } })
    assert.equals("auto", vim.o.signcolumn)
  end)

  a.it("Restores window options on tabnew", function()
    fm.open()
    test_util.wait_for_autocmd({ "User", pattern = "FmEnter" })
    assert.equals("no", vim.o.signcolumn)
    vim.cmd.tabnew()
    vim.cmd.edit({ args = { "README.md" } })
    assert.equals("auto", vim.o.signcolumn)
  end)

  a.it("Sets the window options when re-entering fm buffer", function()
    fm.open()
    test_util.wait_for_autocmd({ "User", pattern = "FmEnter" })
    assert.truthy(vim.w.fm_did_enter)
    vim.cmd.edit({ args = { "README.md" } })
    assert.falsy(vim.w.fm_did_enter)
    fm.open()
    assert.truthy(vim.w.fm_did_enter)
    vim.cmd.vsplit()
    assert.truthy(vim.w.fm_did_enter)
  end)
end)
